{"version":3,"sources":["components/RepoCard/RepoCard.js","components/RepoList/RightNav/RightNav.js","action-types.js","components/RepoList/RepoFilter/RepoFilter.js","actions.js","components/RepoList/RepoList.js","components/UserProfile/UserProfile.js","App.js","serviceWorker.js","reducers.js","store.js","index.js"],"names":["RepoCard","this","props","repo","name","language","fork","description","className","href","private","icon","faCodeBranch","faStar","React","Component","RightNav","count","ActionTypes","RepoFilter","state","selectedLang","selectedType","langChange","setState","onLangFilterChange","value","typeChange","onTypeFilterChange","onSearchChange","langValues","colourStyles","control","styles","backgroundImage","color","fontSize","minHeight","padding","option","borderBottom","indicatorsContainer","indicatorContainer","dropdownContainer","placeholder","type","onChange","options","label","connect","dispatch","event","text","target","payload","RepoList","repos","searchText","filterLang","filterType","length","map","key","id","searchRepo","filterRepoByLang","filterRepoByType","UserProfile","data","bio","avatar_url","company","location","login","src","alt","faUserFriends","faMapMarkerAlt","faEnvelope","App","user","fetch","then","response","json","filteredRepos","filter","toLowerCase","includes","langs","Set","lang","unshift","archived","Boolean","window","hostname","match","initialState","initialStateLangFilter","initialStateTypeFilter","rootReducer","combineReducers","action","Object","assign","applyMiddleware","logger","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b474c894.chunk.js","sourcesContent":["import React from 'react';\r\nimport './RepoCard.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCodeBranch, faStar } from '@fortawesome/free-solid-svg-icons'\r\n// import { faStar } from '@fortawesome/free-regular-svg-icons'\r\n\r\nclass RepoCard extends React.Component {\r\n    render() {\r\n        const { name, language, fork, description } = this.props.repo;\r\n        return (\r\n            <div className=\"repo-card\">\r\n                <div className=\"repo-card-left\">\r\n                    <a href=\"$\" className=\"repo-card-name\">{name}</a>\r\n                    {this.props.repo.private ?\r\n                        <span className=\"repo-card-private\">Private</span> : \"\"\r\n                    }\r\n                    {fork ?\r\n                        <p className=\"repo-card-fork\">Forked</p> : \"\"}\r\n                    <p className=\"repo-card-desc\">{description}</p>\r\n                    <div className=\"repo-card-footer\">\r\n                        {language ?\r\n                            <span className=\"repo-language\"><span className=\"repo-language-circle\"></span>{language}</span> : \"\"}\r\n                        {fork ?\r\n                            <span className=\"repo-members\"><FontAwesomeIcon className=\"repo-members-icon\" icon={faCodeBranch} />651</span> : \"\"}\r\n                        <span>Updated 8 days ago.</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"repo-card-right\">\r\n                    <button className=\"repo-star\"><FontAwesomeIcon className=\"repo-star-icon\" icon={faStar} />Star</button>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RepoCard;","import React from 'react';\r\nimport './RightNav.css';\r\n\r\nclass RightNav extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"right-nav-list\">\r\n                <span className=\"right-list-item\">Overview</span>\r\n                <span className=\"right-list-item active\">Repositories<span className=\"repo-count\">{this.props.count}</span></span>\r\n                <span className=\"right-list-item\">Projects</span>\r\n                <span className=\"right-list-item\">Packages</span>\r\n                <span className=\"right-list-item\">Stars</span>\r\n                <span className=\"right-list-item\">Followers</span>\r\n                <span className=\"right-list-item\">Following</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default RightNav;","export const ActionTypes = {\r\n    SEARCH_REPO: 'SEARCH_REPO',\r\n    FILTER_LANG: 'FILTER_LANG',\r\n    FILTER_TYPE: 'FILTER_TYPE',\r\n}","import React from 'react';\r\nimport './RepoFilter.css';\r\nimport Select from 'react-select';\r\nimport { connect } from 'react-redux';\r\nimport { setSearch, setFilterLang, setFilterType } from '../../../actions';\r\n\r\nclass RepoFilter extends React.Component {\r\n    state = {\r\n        selectedLang: '',\r\n        selectedType: ''\r\n    };\r\n    langChange = selectedLang => {\r\n        this.setState(\r\n            { selectedLang },\r\n            () => this.props.onLangFilterChange(selectedLang.value)\r\n        );\r\n    };\r\n    typeChange = selectedType => {\r\n        this.setState(\r\n            { selectedType },\r\n            () => this.props.onTypeFilterChange(selectedType.value)\r\n        );\r\n    };\r\n    render() {\r\n        const { selectedType, selectedLang } = this.state;\r\n        const { onSearchChange, langValues } = this.props;\r\n        const typeOptions = [\r\n            { value: \"\", label: \"All\" },\r\n            { value: 'Sources', label: 'Sources' },\r\n            { value: 'Archived', label: 'Archived' },\r\n            { value: 'Forks', label: 'Forks' },\r\n        ];\r\n        const colourStyles = {\r\n            control: styles => ({ ...styles, backgroundImage: 'linear-gradient(-180deg,#fafbfc,#eff3f6 90%)', color: \"#24292e\", fontSize: \"0.8em\", minHeight: \"12px\", padding: 0 }),\r\n            option: styles => ({ ...styles, borderBottom: '0.5px solid lightgray', color: '#24292e', fontSize: '0.8em' }),\r\n            indicatorsContainer: styles => ({ ...styles, color: \"#24292e\", fontSize: \"0.4em\", padding: \"0em\" }),\r\n            indicatorContainer: styles => ({ ...styles, color: \"#24292e\", fontSize: \"0.4em\", padding: \"0em\" }),\r\n            dropdownContainer: styles => ({ ...styles, color: \"#24292e\", fontSize: \"0.4em\", padding: \"0em\" }),\r\n            placeholder: styles => ({ ...styles, color: \"#24292e\" }),\r\n        }\r\n        return (\r\n            <div className=\"repo-filter\" >\r\n                <input type=\"text\" className=\"search-bar\" placeholder=\"Enter your search text here.\" onChange={onSearchChange} />\r\n                <div className=\"select-filter\">\r\n                    <Select\r\n                        value={selectedLang}\r\n                        styles={colourStyles}\r\n                        options={langValues}\r\n                        onChange={this.langChange}\r\n                    />\r\n                </div>\r\n                <div className=\"select-filter\">\r\n                    <Select\r\n                        value={selectedType}\r\n                        styles={colourStyles}\r\n                        options={typeOptions}\r\n                        onChange={this.typeChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearch(event.target.value)),\r\n        onLangFilterChange: (option) => dispatch(setFilterLang(option)),\r\n        onTypeFilterChange: (option) => dispatch(setFilterType(option))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(RepoFilter);","import { ActionTypes } from './action-types'\r\nexport const setSearch = text => ({\r\n    type: ActionTypes.SEARCH_REPO,\r\n    payload: text\r\n})\r\n\r\nexport const setFilterLang = text => ({\r\n    type: ActionTypes.FILTER_LANG,\r\n    payload: text\r\n})\r\n\r\nexport const setFilterType = text => ({\r\n    type: ActionTypes.FILTER_TYPE,\r\n    payload: text\r\n})","import React from 'react';\r\nimport './RepoList.css'\r\nimport RepoCard from '../RepoCard/RepoCard'\r\nimport RightNav from './RightNav/RightNav'\r\nimport { connect } from 'react-redux';\r\nimport RepoFilter from './RepoFilter/RepoFilter'\r\nclass RepoList extends React.Component {\r\n    render() {\r\n        const { onSearchChange, langValues, onLangFilterChange, repos, searchText, filterLang, filterType } = this.props;\r\n        return (\r\n            <div className=\"repo-list\">\r\n                <RightNav count={repos.length} />\r\n                <RepoFilter onSearchChange={onSearchChange} langValues={langValues} onLangFilterChange={onLangFilterChange} />\r\n                {(searchText !== \"\" || filterLang !== \"\" || filterType !== \"\") && (repos.length !== 0) &&\r\n                    <div className=\"result-count\"><strong>{repos.length}</strong> results found.</div>\r\n                }\r\n                {repos.length === 0 && <div className=\"result-count\">No matches found.</div>}\r\n                {repos.map(repo => (\r\n                    <RepoCard repo={repo} key={repo.id} />\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchText: state.searchRepo.searchText,\r\n        filterLang: state.filterRepoByLang.filterLang,\r\n        filterType: state.filterRepoByType.filterType\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(RepoList);","import React from 'react';\r\nimport './UserProfile.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUserFriends, faMapMarkerAlt, faEnvelope } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass UserProfile extends React.Component {\r\n    render() {\r\n        const { avatar_url, bio, company, location, name, login } = this.props.data;\r\n        return (\r\n            <div className=\"user-profile\">\r\n                <div className=\"user-image\">\r\n                    <img src=\"https://avatars1.githubusercontent.com/u/7427552?v=4\" alt=\"User's avatar\" />\r\n                </div>\r\n                <div className=\"user-profile-text\">\r\n                    <p className=\"user-name\">{name}</p>\r\n                    <p className=\"user-handle\">{login}</p>\r\n                    <button className=\"user-follow\">Follow</button>\r\n                    <p className=\"user-desc\">{bio}</p>\r\n                    <p className=\"user-work-info\"><FontAwesomeIcon className=\"work-info-icon\" icon={faUserFriends} />{company}</p>\r\n                    <p className=\"user-work-info\"><FontAwesomeIcon className=\"work-info-icon\" icon={faMapMarkerAlt} />{location}</p>\r\n                    <p className=\"user-work-info\"><FontAwesomeIcon className=\"work-info-icon\" icon={faEnvelope} />supreetsingh.247@gmail.com</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserProfile;","import React from 'react';\nimport './App.css'\nimport RepoList from './components/RepoList/RepoList'\nimport UserProfile from './components/UserProfile/UserProfile'\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchText: state.searchRepo.searchText,\n    filterLang: state.filterRepoByLang.filterLang,\n    filterType: state.filterRepoByType.filterType\n  }\n}\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onSearchChange: (event) => dispatch(setSearch(event.target.value)),\n//     onLangFilterChange: (option) => dispatch(setFilterLang(option)),\n//     onTypeFilterChange: (option) => dispatch(setFilterType(option))\n//   }\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      repos: []\n    }\n  }\n  componentDidMount() {\n    fetch(\"https://api.github.com/users/supreetsingh247/repos\").then(response => response.json())\n      .then(repo => { this.setState({ repos: repo }) });\n    fetch(\"https://api.github.com/users/supreetsingh247\").then(response => response.json())\n      .then(data => { this.setState({ user: data }) });\n  }\n  render() {\n    const { repos } = this.state;\n    const { searchText, filterLang, filterType } = this.props;\n    let filteredRepos = repos.filter(repo => repo.name.toLowerCase().includes(searchText.toLowerCase()));\n    let langs = filteredRepos.map(repo => repo.language);\n    const uniqueLang = [...new Set(langs)];\n    langs = uniqueLang.filter(lang => lang != null)\n    const langValues = langs.map(lang => ({ value: lang, label: lang }))\n    langValues.unshift({ value: \"\", label: \"All\" })\n    if (filterLang !== \"\") {\n      filteredRepos = filteredRepos.filter(repo => repo.language === filterLang);\n    }\n    if (filterType === \"Sources\") {\n      filteredRepos = filteredRepos.filter(repo => repo.fork === false);\n    }\n    if (filterType === \"Archived\") {\n      filteredRepos = filteredRepos.filter(repo => repo.archived === true);\n    }\n    if (filterType === \"Forks\") {\n      filteredRepos = filteredRepos.filter(repo => repo.fork === true);\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"temp-top-nav\">\n          <hr />\n        </div>\n        <div className=\"repo-page\">\n          <UserProfile data={this.state.user} />\n          <RepoList repos={filteredRepos} langValues={langValues} />\n        </div>\n      </div >\n    );\n  }\n}\n\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionTypes } from './action-types'\r\n\r\nconst initialState = {\r\n    searchText: \"\"\r\n}\r\n\r\nexport const searchRepo = (state = initialState, action = {}) => {\r\n    switch (action.type) {\r\n        case ActionTypes.SEARCH_REPO:\r\n            return Object.assign({}, state, { searchText: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateLangFilter = {\r\n    filterLang: \"\",\r\n}\r\n\r\nexport const filterRepoByLang = (state = initialStateLangFilter, action = {}) => {\r\n    switch (action.type) {\r\n        case ActionTypes.FILTER_LANG:\r\n            return Object.assign({}, state, { filterLang: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateTypeFilter = {\r\n    filterType: \"\",\r\n}\r\n\r\nexport const filterRepoByType = (state = initialStateTypeFilter, action = {}) => {\r\n    switch (action.type) {\r\n        case ActionTypes.FILTER_TYPE:\r\n            return Object.assign({}, state, { filterType: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\n// import { rootReducer } from './root-reducer'\r\nimport { searchRepo, filterRepoByLang, filterRepoByType } from './reducers'\r\nimport { combineReducers } from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\n\r\nconst rootReducer = combineReducers({ searchRepo, filterRepoByLang, filterRepoByType }, applyMiddleware(logger));\r\nexport const store = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}